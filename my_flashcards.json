{
    "title": "My Flashcards",
    "cards": [
      {
        "question": "What is a database?",
        "answer": "A database is an organized set of stored data that can be accessed from a computer."
      },
      {
        "question": "What is a DBMS?",
        "answer": "A DataBase Management System is a software system designed to manipulate, add, retrieve, define, and manage data in a database."
      },
      {
        "question": "What is the difference bewteen an RDBMS and a DBMS?",
        "answer": "A Relational DataBase Management System stores data in a collection of tables where relations can be defined using the common fields (columns) of the tables."
      },
      {
        "question": "What is SQL?",
        "answer": "Structured Query Language is a programming language for manipulating, adding, and retrieving data stored in a relational database."
      },
      {
        "question": "What are tables is SQL?",
        "answer": "A table is composed of rows (records) and columns (fields) in which data is stored in an organized way."
      },
      {
        "question": "What are constraints in SQL?",
        "answer": "Constraints are rules that dictate the type of data that can go into a table or column (field). If there is any violation between the constraint and the data action, the action is aborted."
      },
      {
        "question": "Give examples of constraints commonly used in SQL.",
        "answer": "NOT NULL - Ensures that a column cannot have a NULL value. UNIQUE - Ensures that all values in a column are different. PRIMARY KEY - Uniquely identifies each row in a table. FOREIGN KEY - Prevents invalid data from being inserted into the foreign key column, because it has to be one of the values contained in the parent table. CHECK - Ensures that the values in a column satisfies a specific condition. DEFAULT - Sets a default value for a column if no value is specified."
      },
      {
        "question": "What is a primary key in SQL?",
        "answer": "A primary key uniquely identifies each row in a table. It also has an implicit NOT NULL constraint."
      },
      {
        "question": "What is a foreign key in SQL?",
        "answer": "A foreign key is a link between tables. An attribute/collection of attributes in a table that refer to the primary key of another table."
      },
      {
        "question": "What is a JOIN in SQL?",
        "answer": "A JOIN clause combines records (rows) from one or more tables based on a related column between the two into a new table."
      },
      {
        "question": "What are the types of JOINs in SQL?",
        "answer": "INNER JOIN - Returns records that have matching values in both tables. LEFT (OUTER) JOIN - Returns all records from the left table, and the matched records from the right table. RIGHT (OUTER) JOIN - Returns all records from the right table, and the matched records from the left table. FULL (OUTER) JOIN - Returns all records when there is a match in either left or right table."
      },
      {
        "question": "What is a SELF-JOIN (unary relation) in SQL?",
        "answer": "A SELF-JOIN (unary relation) is a regular join, but the table is joined with itself."
      },
      {
        "question": "What is an index in SQL?",
        "answer": "An index is a quick lookup table for finding records very fast. Indexes should only be created on columns that will be frequently searched against because updating a table with indexes takes more time than updating a table with no indexes (since the indexes also need to be updated)."
      },
      {
        "question": "What are the differences between clustered and non-clustered indexes in SQL?",
        "answer": "CLUSTERED INDEX - Determines the physical order of data in the table. Each table can have only one clustered index. Provides faster data retrieval for the indexed column(s). May result in slower data modification operations (INSERT, UPDATE) due to the need to maintain the order. NON-CLUSTERED INDEX - Doesn't change the physical order of data in the table. Allows multiple non-clustered indexes per table. Results in slower data retrieval compared to a clustered index for indexed columns. Offers faster data modification operations compared to clustered indexes."
      },
      {
        "question": "What is abstraction in C#?",
        "answer": "Abstraction is hiding the unnecessary details from type consumers."
      },
      {
        "question": "What is encapsulation in C#?",
        "answer": "Encapsulation means that a group of related properties, methods, and other members are treated as a single unit or object. An example would be using access modifiers on class members (public, private, protected, etc.)."
      },
      {
        "question": "What is inheritance in C#?",
        "answer": "Inheritance describes the ability to create new classes based on an existing class by acquiring the its members."
      },
      {
        "question": "What is polymorphism in C#?",
        "answer": "Polymorphism means that you can have multiple classes that can be used interchangeably, even though each class implements the same properties or methods in different ways. Polymorphism means that a call to a member method will cause a different implementation to be executed depending on the type of object that invokes the method. Typically, polymorphism occurs when there is a hierarchy of classes and they are related through inheritance from a common base class."
      },
      {
        "question": "List and define the different possible forms of accessibility for class members in C#.",
        "answer": "PUBLIC - Access not limited. PROTECTED - Access limited to this class or classes derived from this class. INTERNAL - Access limited to this program (the assembly in which it is defined). PROTECTED INTERNAL - Access limited to this program (the assembly in which it is defined) or classes derived from this class. PRIVATE - Access limited to this class. SEALED - Cannot be inherited."
      },
      {
        "question": "What is the difference between a class and an object in C#?",
        "answer": "Objects are instances of classes."
      },
      {
        "question": "What does the `this` keyword mean in C#?",
        "answer": "The `this` keyword is a reference to the current instance of a class."
      },
      {
        "question": "Describe the garbage collection process in .NET.",
        "answer": "The .NET Framework has a garbage collector that periodically releases memory used by objects when they are no longer accessible. An object will be eligible for destruction when there are no more references to it. Note: Objects cannot be explicitly deallocated in C#."
      },
      {
        "question": "What is the difference between an abstract class and an interface in C#?",
        "answer": "An abstract class is a class that cannot be instantiated. Instead, it serves as a base class for other classes to inherit from. Abstract classes are used to define a common set of behaviors or properties that derived classes should have. Interfaces specify what a class must do and not how. Like a class, Interface can have methods, properties, events, and indexers as its members. But interfaces will contain only the declaration of the members."
      },
      {
        "question": "What does the modifier `static` indicate in C#?",
        "answer": "You cannot instantiate an object of a static class, as only one instance of the static class can exist in a program."
      },
      {
        "question": "Explain the differences between Singleton, Scoped, and Transient lifetimes in ASP.NET Core Web API.",
        "answer": "SINGLETON - Objects registered as singletons are created once and shared throughout the applicationâ€™s lifetime. This is useful for stateless services or objects that are expensive to create and can be reused across requests. SCOPED - Scoped objects are created once per client request within the scope of that request. They are disposed of when the request ends. Scoped lifetime is beneficial for objects that maintain state specific to a single request, such as database contexts or unit of work instances. TRANSIENT - Transient objects are created every time they are requested. They are not shared between requests or other components. Transient lifetime is suitable for lightweight, stateless services where a new instance is needed for each operation."
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      },
      {
        "question": "",
        "answer": ""
      }
    ]
  }
  